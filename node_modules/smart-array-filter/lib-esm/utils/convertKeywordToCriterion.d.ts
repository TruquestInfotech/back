/**
 * A criterion which checks the existence of a key
 */
export interface KeyCriterion {
    type: 'exists';
    /**
     * The regexp that should match the key. If the key does not meet the regexp,
     */
    key: RegExp;
    /**
     * Match non-existing keys instead of existing keys
     */
    negate: boolean;
}
/**
 * A criterion which optionnally matches a key and checks the value in a callback
 */
export interface ValueCriterion {
    type: 'matches';
    /**
     * The regexp that should match the key. Non matching keys are not checked
     */
    key?: RegExp;
    /**
     * Use to match anything that does not match the value
     */
    negate: boolean;
    checkString: (arg: string) => boolean;
    checkNumber: (arg: number) => boolean;
}
export type Criterion = KeyCriterion | ValueCriterion;
/**
 * @internal
 */
export declare function convertKeywordToCriterion(keyword: string, options?: {
    caseSensitive?: boolean;
    pathAlias: Record<string, RegExp>;
}): Criterion;
export declare function convertKeywordsToCriteria(keywords: string[], options?: {
    caseSensitive?: boolean;
    pathAlias: Record<string, RegExp>;
}): Criterion[];
//# sourceMappingURL=convertKeywordToCriterion.d.ts.map