"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertKeywordsToCriteria = exports.convertKeywordToCriterion = void 0;
const lodash_escaperegexp_1 = __importDefault(require("lodash.escaperegexp"));
const getCheckNumber_1 = __importDefault(require("./getCheckNumber"));
const getCheckString_1 = __importDefault(require("./getCheckString"));
/**
 * @internal
 */
function convertKeywordToCriterion(keyword, options = {
    pathAlias: {},
}) {
    const { caseSensitive, pathAlias } = options;
    const regexpFlags = caseSensitive ? '' : 'i';
    let negate = false;
    if (keyword.startsWith('-')) {
        negate = true;
        keyword = keyword.substring(1);
    }
    const colon = keyword.indexOf(':');
    if (colon > -1) {
        const value = keyword.substring(colon + 1);
        if (colon > 0) {
            const key = keyword.substring(0, colon);
            if (key === 'is') {
                // a property path exists
                return {
                    type: 'exists',
                    negate,
                    key: new RegExp(`(^|\\.)${(0, lodash_escaperegexp_1.default)(value)}(\\.|$)`, regexpFlags),
                };
            }
            else {
                return {
                    type: 'matches',
                    negate,
                    key: pathAlias[key]
                        ? pathAlias[key]
                        : new RegExp(`(^|\\.)${(0, lodash_escaperegexp_1.default)(key)}(\\.|$)`, regexpFlags),
                    checkNumber: (0, getCheckNumber_1.default)(value),
                    checkString: (0, getCheckString_1.default)(value, regexpFlags),
                };
            }
        }
    }
    return {
        type: 'matches',
        negate,
        checkNumber: (0, getCheckNumber_1.default)(keyword),
        checkString: (0, getCheckString_1.default)(keyword, regexpFlags),
    };
}
exports.convertKeywordToCriterion = convertKeywordToCriterion;
function convertKeywordsToCriteria(keywords, options = {
    pathAlias: {},
}) {
    return keywords.map((keyword) => {
        return convertKeywordToCriterion(keyword, options);
    });
}
exports.convertKeywordsToCriteria = convertKeywordsToCriteria;
//# sourceMappingURL=convertKeywordToCriterion.js.map